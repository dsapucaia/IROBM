import logging
import re
import sys
from collections.abc import Sequence
from pathlib import Path

import numpy as np
import pandas as pd
import questionary
from questionary import Validator, ValidationError
from tabulate import tabulate

# Constantes para extens√µes de arquivo e nomes de colunas
XLS = ".xls"
CSV = ".csv"
XLSX = ".xlsx"
REGIAO = "Regi√£o"

# Defini√ß√£o de emojis para uso no script
EMOJI_SUCCESS = "‚úÖ"
EMOJI_ERROR = "‚ùå"
EMOJI_WARNING = "‚ö†Ô∏è"
EMOJI_QUESTION = "ü§î"
EMOJI_INFO = "‚ÑπÔ∏è"
EMOJI_REMOVAL = "üóëÔ∏è"
EMOJI_DONE = "‚úîÔ∏è"

# Configura√ß√£o do logging
logging.basicConfig(
    filename='irobm_calculator.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


class NumberValidator(Validator):
    def validate(self, document):
        try:
            value = float(document.text)
            if value < 0:
                raise ValueError
        except ValueError:
            raise ValidationError(
                message="Por favor, insira um n√∫mero v√°lido (n√£o negativo).",
                cursor_position=len(document.text)
            )


class IROBMCalculator:
    def __init__(self):
        self.df = pd.DataFrame()
        self.parametros = {}

    @staticmethod
    def padronizar_regiao(df: pd.DataFrame) -> pd.DataFrame:
        """
        Padroniza a coluna 'Regi√£o' para mai√∫sculas e remove espa√ßos em branco.
        """
        if REGIAO in df.columns:
            df[REGIAO] = df[REGIAO].astype(str).str.strip().str.upper()
        return df

    def carregar_e_visualizar_dados(self, arquivo, planilha, header_row):
        df = self.carregar_dados(arquivo, planilha, header_row)
        self.exibir_primeiras_linhas(df)
        return df

    def validar_nome_parametro(self, nome: str) -> bool:
        return len(nome.strip()) > 0 and nome.strip().upper() not in (p.upper() for p in self.parametros)

    def atualizar_dataframe_com_parametro(self, parametro_df_clean, nome_parametro):
        # Padronizar a coluna "Regi√£o"
        parametro_df_clean = self.padronizar_regiao(parametro_df_clean)

        # Padronizar a coluna "Regi√£o" no DataFrame principal
        self.df = self.padronizar_regiao(self.df)

        # Adicionar o par√¢metro ao DataFrame principal com base na coluna "Regi√£o"
        self.df = self.df.merge(parametro_df_clean, on=REGIAO, how='left')

        # Renomear a coluna do par√¢metro para o nome fornecido
        self.df.rename(columns={parametro_df_clean.columns[1]: nome_parametro}, inplace=True)

        # Tratar valores ausentes
        self.df.fillna({nome_parametro: 0}, inplace=True)

    def normalizar_coluna(self, coluna: str):
        soma_coluna = self.df[coluna].sum()
        if soma_coluna != 0:
            self.df[coluna] = self.df[coluna] / soma_coluna
            print(f"{EMOJI_SUCCESS} Dados da coluna '{coluna}' normalizados com sucesso.\n")
            logging.info(f"Coluna '{coluna}' normalizada. Soma: {soma_coluna}")
        else:
            print(f"{EMOJI_WARNING} A soma dos valores da coluna '{coluna}' √© zero. Normaliza√ß√£o n√£o realizada.\n")
            logging.warning(f"Tentativa de normalizar a coluna '{coluna}' com soma zero.")

    def validar_coluna_numerica(self, coluna: pd.Series) -> bool:
        """
        Verifica se todos os valores na coluna s√£o num√©ricos.
        """
        coerced = pd.to_numeric(coluna, errors='coerce')
        nao_numericos = coerced.isna() & ~coluna.isna()
        return not nao_numericos.any()

    def limpar_coluna_numerica(self, coluna: pd.Series) -> pd.Series:
        """
        Tenta limpar os dados n√£o num√©ricos da coluna com base na escolha do usu√°rio.
        """
        # Identificar valores n√£o num√©ricos
        coerced = pd.to_numeric(coluna, errors='coerce')
        nao_numericos = coerced.isna() & ~coluna.isna()

        # Op√ß√£o 1: Remover linhas com valores inv√°lidos
        # Op√ß√£o 2: Substituir valores inv√°lidos por NaN
        # Op√ß√£o 3: Remover caracteres n√£o num√©ricos
        escolha_limpeza = questionary.select(
            f"{EMOJI_QUESTION} Como deseja limpar os dados n√£o num√©ricos?",
            choices=[
                "Remover linhas com valores inv√°lidos",
                "Substituir valores inv√°lidos por NaN",
                "Remover caracteres n√£o num√©ricos"
            ]
        ).ask()

        if escolha_limpeza == "Remover linhas com valores inv√°lidos":
            linhas_removidas = nao_numericos.sum()
            coluna = coluna.drop(index=nao_numericos[nao_numericos].index)
            print(f"{EMOJI_SUCCESS} {linhas_removidas} linhas removidas.\n")
            logging.info(f"{linhas_removidas} linhas removidas da coluna para limpeza.")
        elif escolha_limpeza == "Substituir valores inv√°lidos por NaN":
            coluna = coerced
            print(f"{EMOJI_SUCCESS} Valores inv√°lidos substitu√≠dos por NaN.\n")
            logging.info("Valores inv√°lidos na coluna substitu√≠dos por NaN.")
        elif escolha_limpeza == "Remover caracteres n√£o num√©ricos":
            # Utilizar express√£o regular para remover caracteres n√£o num√©ricos, exceto ponto decimal
            coluna = coluna.astype(str).apply(lambda x: re.sub(r'[^\d\.]', '', x))
            # Tentar converter para num√©rico novamente
            coluna = pd.to_numeric(coluna, errors='coerce')
            # Verificar se ainda h√° valores n√£o num√©ricos
            if not self.validar_coluna_numerica(coluna):
                print(
                    f"{EMOJI_ERROR} A limpeza n√£o conseguiu remover todos os caracteres n√£o num√©ricos. Opera√ß√£o cancelada.\n")
                logging.error("A limpeza n√£o conseguiu remover todos os caracteres n√£o num√©ricos da coluna.")
                return coluna  # Retorna a coluna com valores ainda inv√°lidos
            else:
                print(f"{EMOJI_SUCCESS} Caracteres n√£o num√©ricos removidos com sucesso.\n")
                logging.info("Caracteres n√£o num√©ricos removidos da coluna.")

        # Exibir amostra dos dados limpos
        print("\n=== Amostra dos Dados Limpados ===\n")
        print(tabulate(coluna.dropna().head(5).to_frame(name=coluna.name), headers='keys', tablefmt='grid'))
        print("\n")
        logging.info(f"Amostra dos dados limpos da coluna '{coluna.name}' exibida para o usu√°rio.")

        return coluna

    def acrescentar_area_de_estudo(self):
        print(f"\n{EMOJI_INFO} === Acrescentar √Årea de Estudo ===\n")
        arquivo = self.selecionar_arquivo("ibge.xlsx")
        planilha = self.selecionar_planilha(arquivo)
        self.carregar_e_visualizar_dados(arquivo, planilha, header_row=None)

        linha_inicio = self.selecionar_linha_inicio()
        areas_df = self.carregar_e_visualizar_dados(arquivo, planilha, header_row=linha_inicio)

        colunas = list(areas_df.columns)
        coluna_selecionada = self.selecionar_coluna(
            colunas,
            f"{EMOJI_INFO} Selecione a coluna que cont√©m as √°reas de estudo:"
        )

        if not coluna_selecionada:
            print(f"{EMOJI_WARNING} Nenhuma coluna selecionada. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhuma coluna de √°rea de estudo selecionada.")
            return

        unique_values = areas_df[coluna_selecionada].dropna().unique().tolist()

        valores_para_remover = questionary.checkbox(
            f"{EMOJI_QUESTION} Selecione os valores que deseja remover da coluna '{coluna_selecionada}':",
            choices=unique_values
        ).ask()

        if valores_para_remover:
            num_removidos = areas_df[coluna_selecionada].isin(valores_para_remover).sum()
            areas_df.loc[areas_df[coluna_selecionada].isin(valores_para_remover), coluna_selecionada] = np.nan
            areas_df.dropna(inplace=True)
            print(f"{EMOJI_SUCCESS} {num_removidos} valores removidos da coluna '{coluna_selecionada}'.\n")
            logging.info(f"{num_removidos} valores removidos da coluna '{coluna_selecionada}'.")
        else:
            print(f"{EMOJI_INFO} Nenhum valor foi removido.\n")
            logging.info("Nenhum valor removido da coluna de √°rea de estudo.")

        areas_df.rename(columns={coluna_selecionada: REGIAO}, inplace=True)
        areas_df = self.padronizar_regiao(areas_df)

        if REGIAO in self.df.columns:
            self.df = pd.concat([self.df, areas_df[REGIAO]], ignore_index=True).drop_duplicates().reset_index(drop=True)
        else:
            self.df[REGIAO] = areas_df[REGIAO]

        print(f"{EMOJI_SUCCESS} √Årea de estudo '{REGIAO}' adicionada com sucesso ao DataFrame.\n")
        logging.info(f"√Årea de estudo '{REGIAO}' adicionada ao DataFrame.")

    def acrescentar_parametro(self):
        print(f"\n{EMOJI_INFO} === Acrescentar um Par√¢metro ===\n")

        nome = self._obter_nome_parametro()
        if not nome:
            return

        arquivo, planilha = self._selecionar_arquivo_e_planilha()
        if not arquivo:
            return

        self.carregar_e_visualizar_dados(arquivo, planilha, header_row=None)

        linha_inicio = self.selecionar_linha_inicio()
        parametro_df = self.carregar_e_visualizar_dados(arquivo, planilha, header_row=linha_inicio)

        coluna_dados, coluna_referencia = self._selecionar_colunas_parametro(parametro_df)
        if not coluna_dados or not coluna_referencia:
            return

        peso = self._obter_peso_parametro(nome)
        if peso is None:
            return

        if not self._verificar_regiao_existe():
            return

        parametro_df_clean = self._preparar_parametro_df(parametro_df, coluna_referencia, coluna_dados)
        if parametro_df_clean is None:
            return

        if not self.validar_coluna_numerica(parametro_df_clean[coluna_dados]):
            if not self._tratar_dados_nao_numericos(parametro_df_clean, coluna_dados):
                return

        self.atualizar_dataframe_com_parametro(parametro_df_clean, nome)

        self._processar_normalizacao(nome)

        self.parametros[nome] = peso
        print(f"{EMOJI_SUCCESS} Par√¢metro '{nome}' adicionado com sucesso.\n")
        logging.info(f"Par√¢metro '{nome}' adicionado com peso {peso}.")

        self._exibir_amostra_parametro(nome)

    def _obter_nome_parametro(self):
        nome = questionary.text(
            f"{EMOJI_QUESTION} Digite o nome do par√¢metro:",
            validate=lambda text: self.validar_nome_parametro(text) or "Nome inv√°lido ou j√° existe."
        ).ask()

        if not nome or not nome.strip():
            print(f"{EMOJI_WARNING} Nenhum nome fornecido. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhum nome de par√¢metro fornecido.")
            return None

        nome = nome.strip()

        if not self.validar_nome_parametro(nome):
            print(f"{EMOJI_ERROR} Erro: Um par√¢metro com o nome '{nome}' j√° existe.\n")
            logging.error(f"Falha ao adicionar par√¢metro: Nome '{nome}' j√° existe.")
            return None

        return nome

    def _selecionar_arquivo_e_planilha(self):
        try:
            arquivo = self.selecionar_arquivo("ibge.xlsx")
            planilha = self.selecionar_planilha(arquivo)
            return arquivo, planilha
        except Exception as e:
            print(f"{EMOJI_ERROR} Erro ao selecionar arquivo ou planilha: {e}\n")
            logging.error(f"Erro ao selecionar arquivo ou planilha: {e}")
            return None, None

    def _selecionar_colunas_parametro(self, parametro_df):
        colunas = list(parametro_df.columns)
        coluna_dados = self.selecionar_coluna(
            colunas,
            "Selecione a coluna que cont√©m os dados do par√¢metro:"
        )

        # Selecionar a coluna de refer√™ncia para alinhamento com "Regi√£o"
        print(f"{EMOJI_INFO} Selecione a coluna de refer√™ncia para alinhar com '{REGIAO}':")
        coluna_referencia = self.selecionar_coluna(
            colunas,
            f"Selecione a coluna de refer√™ncia (correspondente a '{REGIAO}' no DataFrame principal):"
        )

        if not coluna_referencia:
            print(f"{EMOJI_WARNING} Nenhuma coluna de refer√™ncia selecionada. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhuma coluna de refer√™ncia selecionada.")
            return None, None

        return coluna_dados, coluna_referencia

    def _obter_peso_parametro(self, nome):
        peso = questionary.text(
            f"{EMOJI_QUESTION} Digite o peso para o par√¢metro '{nome}':",
            validate=NumberValidator
        ).ask()

        if not peso or not peso.strip():
            print(f"{EMOJI_WARNING} Nenhum peso fornecido. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhum peso fornecido para o par√¢metro.")
            return None

        return float(peso)

    def _verificar_regiao_existe(self):
        if REGIAO not in self.df.columns:
            print(
                f"{EMOJI_ERROR} Erro: A coluna '{REGIAO}' n√£o est√° presente no DataFrame. Adicione uma √°rea de estudo primeiro.\n")
            logging.error(f"Falha ao adicionar par√¢metro: Coluna '{REGIAO}' ausente.")
            return False
        return True

    def _preparar_parametro_df(self, parametro_df, coluna_referencia, coluna_dados):
        parametro_df_clean = parametro_df[[coluna_referencia, coluna_dados]].dropna(
            subset=[coluna_referencia, coluna_dados])
        parametro_df_clean.rename(columns={coluna_referencia: REGIAO}, inplace=True)
        return parametro_df_clean

    def _tratar_dados_nao_numericos(self, parametro_df_clean, coluna_dados):
        print(f"{EMOJI_WARNING} A coluna '{coluna_dados}' cont√©m valores n√£o num√©ricos.")
        logging.warning(f"Coluna '{coluna_dados}' cont√©m valores n√£o num√©ricos.")

        # Mostrar uma amostra dos dados n√£o num√©ricos
        amostra_nao_numerica = parametro_df_clean.loc[
                                   pd.to_numeric(parametro_df_clean[coluna_dados], errors='coerce').isna(),
                                   coluna_dados
                               ].unique().tolist()[:5]
        print("Exemplo de valores inv√°lidos:", amostra_nao_numerica)

        limpar = questionary.confirm(
            f"{EMOJI_QUESTION} Deseja tentar limpar os dados n√£o num√©ricos da coluna '{coluna_dados}'?",
            default=True
        ).ask()

        if limpar:
            parametro_df_clean[coluna_dados] = self.limpar_coluna_numerica(parametro_df_clean[coluna_dados])
            # Verificar novamente se h√° valores n√£o num√©ricos ap√≥s a limpeza
            if not self.validar_coluna_numerica(parametro_df_clean[coluna_dados]):
                print(
                    f"{EMOJI_ERROR} A limpeza n√£o conseguiu remover todos os valores n√£o num√©ricos. Opera√ß√£o cancelada.\n")
                logging.error(
                    f"A limpeza n√£o conseguiu remover todos os valores n√£o num√©ricos da coluna '{coluna_dados}'.")
                return False
            return True
        else:
            print(f"{EMOJI_INFO} Dados n√£o foram limpos. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Dados n√£o foram limpos.")
            return False

    def _processar_normalizacao(self, nome):
        # Perguntar se o usu√°rio deseja normalizar os dados do par√¢metro
        normalizar = questionary.confirm(
            f"{EMOJI_QUESTION} Deseja normalizar os dados do par√¢metro '{nome}'?",
            default=False
        ).ask()

        if normalizar:
            self.normalizar_coluna(nome)
        else:
            print(f"{EMOJI_INFO} Dados do par√¢metro '{nome}' n√£o foram normalizados.\n")
            logging.info(f"Dados do par√¢metro '{nome}' n√£o foram normalizados.")

    def _exibir_amostra_parametro(self, nome):
        # Exibir amostra dos dados limpos
        print("\n=== Amostra dos Dados Limpos do Par√¢metro ===\n")
        print(tabulate(self.df[[REGIAO, nome]].head(5), headers='keys', tablefmt='grid'))
        print("\n")
        logging.info(f"Amostra dos dados limpos do par√¢metro '{nome}' exibida para o usu√°rio.")

    def calcular_irobm(self):
        print(f"\n{EMOJI_INFO} === Calcular IROBM ===\n")
        if self.df.empty:
            print(f"{EMOJI_WARNING} Nenhum dado carregado para calcular o IROBM.\n")
            logging.warning("Tentativa de calcular IROBM com DataFrame vazio.")
            return

        if not self.parametros:
            print(f"{EMOJI_WARNING} Nenhum par√¢metro adicionado para o c√°lculo do IROBM.\n")
            logging.warning("Tentativa de calcular IROBM sem par√¢metros adicionados.")
            return

        # Verificar se todas as colunas dos par√¢metros est√£o presentes no DataFrame
        parametros_faltando = [p for p in self.parametros if p not in self.df.columns]
        if parametros_faltando:
            for parametro in parametros_faltando:
                print(f"{EMOJI_WARNING} O par√¢metro '{parametro}' n√£o est√° presente no DataFrame.\n")
                logging.warning(f"Par√¢metro '{parametro}' ausente no DataFrame durante o processamento.")
            return

        # Criar uma matriz dos par√¢metros
        parametros_df = self.df[list(self.parametros.keys())].copy()

        # Verificar e tratar valores ausentes
        if parametros_df.isnull().values.any():
            print(f"{EMOJI_WARNING} Existem valores ausentes nos par√¢metros. Substituindo por zero para o c√°lculo.\n")
            logging.warning("Valores ausentes encontrados nos par√¢metros. Substituindo por zero.")
            parametros_df.fillna(0, inplace=True)

        # Criar um vetor de pesos
        pesos = np.array(list(self.parametros.values())).reshape((len(self.parametros), 1))

        # Calcular IROBM (multiplica√ß√£o matricial)
        irobm = parametros_df.values @ pesos

        # Adicionar ou atualizar a coluna IROBM no DataFrame
        self.df['IROBM'] = irobm

        # Informar o usu√°rio sobre o c√°lculo
        print(f"{EMOJI_SUCCESS} IROBM calculado e adicionado/atualizado no DataFrame com sucesso.\n")
        print(
            f"{EMOJI_INFO} Para visualizar a tabela atualizada, selecione a op√ß√£o '4. Visualizar a tabela' no menu.\n")
        logging.info("IROBM calculado e adicionado/atualizado no DataFrame.")

    def remover_parametro(self):
        if not self.parametros:
            print(f"{EMOJI_WARNING} Nenhum par√¢metro para remover.\n")
            logging.info("Tentativa de remover par√¢metro sem par√¢metros existentes.")
            return

        print(f"\n{EMOJI_INFO} === Remover um Par√¢metro ===\n")
        nomes = list(self.parametros.keys())
        escolha = questionary.select(
            f"{EMOJI_QUESTION} Selecione o par√¢metro a ser removido:",
            choices=nomes
        ).ask()

        if escolha in self.df.columns:
            self.df.drop(columns=[escolha], inplace=True)
            del self.parametros[escolha]
            print(f"{EMOJI_SUCCESS} Par√¢metro '{escolha}' removido com sucesso.\n")
            logging.info(f"Par√¢metro '{escolha}' removido do DataFrame e dicion√°rio de par√¢metros.")
        else:
            print(f"{EMOJI_ERROR} Erro: O par√¢metro '{escolha}' n√£o existe no DataFrame.\n")
            logging.error(f"Falha ao remover par√¢metro '{escolha}': N√£o encontrado no DataFrame.")

    def visualizar_tabela(self):
        print(f"\n{EMOJI_INFO} === Visualizar Tabela ===\n")
        if self.df.empty:
            print(f"{EMOJI_WARNING} Nenhum dado foi carregado at√© o momento.\n")
            logging.info("Tentativa de visualizar tabela com DataFrame vazio.")
            return

        # Estilizar e exibir a tabela usando tabulate
        print(tabulate(self.df, headers='keys', tablefmt='grid'))
        print("\n")
        logging.info("Tabela visualizada pelo usu√°rio.")

    def salvar_arquivo(self):
        if self.df.empty:
            print(f"{EMOJI_WARNING} Nenhum dado para salvar.\n")
            logging.info("Tentativa de salvar arquivo com DataFrame vazio.")
            return

        salvar = questionary.confirm(
            f"{EMOJI_QUESTION} Deseja salvar os dados?",
            default=True
        ).ask()

        if salvar:
            nome_arquivo = questionary.text(
                f"{EMOJI_QUESTION} Digite o nome do arquivo (sem extens√£o):",
                validate=lambda text: len(text.strip()) > 0 or "Nome inv√°lido."
            ).ask()

            if not nome_arquivo or not nome_arquivo.strip():
                print(f"{EMOJI_WARNING} Nome do arquivo inv√°lido. Opera√ß√£o cancelada.\n")
                logging.info("Opera√ß√£o de salvar arquivo cancelada: Nome inv√°lido.")
                return

            nome_arquivo = nome_arquivo.strip()

            formato = questionary.select(
                f"{EMOJI_QUESTION} Escolha o formato do arquivo:",
                choices=["CSV", "XLSX"]
            ).ask()

            nome_completo = f"{nome_arquivo}.{formato.lower()}"

            try:
                if formato == "CSV":
                    self.df.to_csv(nome_completo, index=False)
                else:
                    self.df.to_excel(nome_completo, index=False)
                print(f"{EMOJI_SUCCESS} Dados salvos em '{nome_completo}'.\n")
                logging.info(f"Dados salvos em '{nome_completo}'.")
            except Exception as e:
                print(f"{EMOJI_ERROR} Erro ao salvar o arquivo '{nome_completo}': {e}\n")
                logging.error(f"Erro ao salvar o arquivo '{nome_completo}': {e}")
        else:
            print(f"{EMOJI_INFO} Os dados n√£o foram salvos.\n")
            logging.info("Usu√°rio optou por n√£o salvar os dados.")

    def editar_nome_parametro(self):
        if not self.parametros:
            print(f"{EMOJI_WARNING} Nenhum par√¢metro para editar.\n")
            logging.info("Tentativa de editar nome de par√¢metro sem par√¢metros existentes.")
            return

        print(f"\n{EMOJI_INFO} === Editar Nomes dos Par√¢metros ===\n")
        nomes = list(self.parametros.keys())
        escolha = questionary.select(
            f"{EMOJI_QUESTION} Selecione o par√¢metro cujo nome deseja editar:",
            choices=nomes
        ).ask()

        novo_nome = questionary.text(
            f"{EMOJI_QUESTION} Digite o novo nome para o par√¢metro '{escolha}':",
            validate=lambda text: self.validar_nome_parametro(text) or "Nome inv√°lido ou j√° existe."
        ).ask()

        if not novo_nome or not novo_nome.strip():
            print(f"{EMOJI_WARNING} Nenhum novo nome fornecido. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhum novo nome fornecido para o par√¢metro.")
            return

        novo_nome = novo_nome.strip()

        if not self.validar_nome_parametro(novo_nome):
            print(f"{EMOJI_ERROR} Erro: Um par√¢metro com o nome '{novo_nome}' j√° existe.\n")
            logging.error(f"Falha ao renomear par√¢metro: Nome '{novo_nome}' j√° existe.")
            return

        # Renomear a coluna no DataFrame
        self.df.rename(columns={escolha: novo_nome}, inplace=True)
        # Atualizar o dicion√°rio de par√¢metros
        self.parametros[novo_nome] = self.parametros.pop(escolha)
        print(f"{EMOJI_SUCCESS} Nome do par√¢metro atualizado para '{novo_nome}'.\n")
        logging.info(f"Par√¢metro '{escolha}' renomeado para '{novo_nome}'.")

    def editar_peso_parametro(self):
        if not self.parametros:
            print(f"{EMOJI_WARNING} Nenhum par√¢metro para editar.\n")
            logging.info("Tentativa de editar peso de par√¢metro sem par√¢metros existentes.")
            return

        print(f"\n{EMOJI_INFO} === Editar Peso dos Par√¢metros ===\n")
        # Mostrar os pesos atuais e a soma
        print("Pesos atuais dos par√¢metros:")
        total_pesos = 0
        for nome, peso in self.parametros.items():
            print(f"- {nome}: {peso}")
            total_pesos += peso
        print(f"Soma atual dos pesos: {total_pesos}\n")

        nomes = list(self.parametros.keys())
        escolha = questionary.select(
            f"{EMOJI_QUESTION} Selecione o par√¢metro cujo peso deseja editar:",
            choices=nomes
        ).ask()

        novo_peso = questionary.text(
            f"{EMOJI_QUESTION} Digite o novo peso para o par√¢metro '{escolha}':",
            validate=NumberValidator
        ).ask()

        if not novo_peso or not novo_peso.strip():
            print(f"{EMOJI_WARNING} Nenhum novo peso fornecido. Opera√ß√£o cancelada.\n")
            logging.info("Opera√ß√£o cancelada: Nenhum novo peso fornecido para o par√¢metro.")
            return

        novo_peso = float(novo_peso)

        # Atualizar o peso no dicion√°rio
        self.parametros[escolha] = novo_peso
        print(f"{EMOJI_SUCCESS} Peso do par√¢metro '{escolha}' atualizado para {novo_peso}.\n")
        logging.info(f"Peso do par√¢metro '{escolha}' atualizado para {novo_peso}.")

        # Mostrar os pesos atualizados e a nova soma
        print("Pesos atualizados dos par√¢metros:")
        total_pesos = 0
        for nome, peso in self.parametros.items():
            print(f"- {nome}: {peso}")
            total_pesos += peso
        print(f"Soma atual dos pesos: {total_pesos}\n")
        logging.info(f"Somat√≥rio dos pesos atualizado: {total_pesos}")

    @staticmethod
    def sair():
        print(f"\n{EMOJI_DONE} Saindo do programa. At√© mais!\n")
        logging.info("Programa encerrado pelo usu√°rio.")
        sys.exit(0)

    def processar_dados(self):
        if self.df.empty:
            print(f"{EMOJI_WARNING} Nenhum dado para processar.\n")
            logging.warning("Tentativa de processar dados com DataFrame vazio.")
            return

        if len(self.parametros) == 0:
            print(f"{EMOJI_WARNING} Nenhum par√¢metro adicionado para o c√°lculo do IROBM.\n")
            logging.warning("Tentativa de calcular IROBM sem par√¢metros adicionados.")
            return

        # Verificar se todas as colunas necess√°rias est√£o presentes
        for nome in self.parametros.keys():
            if nome not in self.df.columns:
                print(f"{EMOJI_WARNING} O par√¢metro '{nome}' n√£o est√° presente no DataFrame.\n")
                logging.warning(f"Par√¢metro '{nome}' ausente no DataFrame durante o processamento.")
                return

        # Normalizar os dados
        colunas_dados = list(self.parametros.keys())
        dados_normalizados = self.df[colunas_dados].div(self.df[colunas_dados].sum())

        # Calcular IROBM
        pesos = np.array(list(self.parametros.values())).reshape((len(self.parametros), 1))
        irobm = dados_normalizados.values @ pesos

        # Adicionar IROBM ao DataFrame
        self.df['IROBM'] = irobm

        # Verificar soma de IROBM
        soma_irobm = irobm.sum()
        print(f"\n{EMOJI_INFO} Soma dos valores de IROBM: {soma_irobm:.4f}")
        if np.isclose(soma_irobm, 1, atol=1e-2) or np.isclose(soma_irobm, 100, atol=1e-1):
            print(f"{EMOJI_SUCCESS} A soma dos valores de IROBM est√° correta.\n")
            logging.info(f"Soma dos valores de IROBM est√° correta: {soma_irobm}")
        else:
            print(f"{EMOJI_WARNING} A soma dos valores de IROBM N√ÉO est√° correta.\n")
            logging.warning(f"Soma dos valores de IROBM n√£o est√° correta: {soma_irobm}")

    def menu(self):
        opcoes = {
            "1. Acrescentar √°rea de estudo": self.acrescentar_area_de_estudo,
            "2. Acrescentar um par√¢metro": self.acrescentar_parametro,
            "3. Remover um par√¢metro": self.remover_parametro,
            "4. Visualizar a tabela": self.visualizar_tabela,
            "5. Salvar arquivo": self.salvar_arquivo,
            "6. Editar nomes dos par√¢metros": self.editar_nome_parametro,
            "7. Editar peso dos par√¢metros": self.editar_peso_parametro,
            "8. Calcular IROBM": self.calcular_irobm,
            "9. Sair": self.sair  # "Sair" como √∫ltima op√ß√£o
        }

        while True:
            escolha = questionary.select(
                f"{EMOJI_QUESTION} Selecione uma op√ß√£o:",
                choices=list(opcoes.keys())
            ).ask()

            funcao = opcoes.get(escolha)
            if funcao:
                funcao()
            else:
                print(f"{EMOJI_ERROR} Op√ß√£o inv√°lida. Tente novamente.\n")
                logging.error(f"Op√ß√£o inv√°lida selecionada: {escolha}")

    # Fun√ß√µes auxiliares

    @staticmethod
    def selecionar_coluna(colunas, mensagem):
        """
        Apresenta uma lista de colunas para o usu√°rio selecionar uma.
        """
        escolha = questionary.select(
            mensagem,
            choices=colunas
        ).ask()
        return escolha

    @staticmethod
    def selecionar_arquivo(default_arquivo="ibge.xlsx", tipos_validos=None):
        """
        Solicita ao usu√°rio o caminho do arquivo de entrada (CSV ou Excel).
        """
        if tipos_validos is None:
            tipos_validos = [CSV, XLSX, XLS]
        while True:
            arquivo = questionary.text(
                f"{EMOJI_QUESTION} Digite o caminho do arquivo de entrada:",
                default=default_arquivo
            ).ask()
            if not arquivo or not arquivo.strip():
                print(f"{EMOJI_ERROR} Erro: O nome do arquivo n√£o pode estar vazio.\n")
                continue
            arquivo = arquivo.strip('"').strip("'")
            caminho = Path(arquivo)
            if not caminho.is_file():
                print(f"{EMOJI_ERROR} Erro: O arquivo '{arquivo}' n√£o foi encontrado. Tente novamente.\n")
                continue
            if caminho.suffix.lower() not in tipos_validos:
                tipos_str = ", ".join(tipos_validos)
                print(f"{EMOJI_ERROR} Erro: O arquivo deve ser do tipo {tipos_str}.\n")
                continue
            return caminho

    @staticmethod
    def selecionar_planilha(arquivo):
        """
        Se o arquivo for Excel com m√∫ltiplas planilhas, permite ao usu√°rio selecionar uma.
        Retorna o nome da planilha selecionada.
        """
        if arquivo.suffix.lower() in [XLSX, XLS]:
            try:
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names
                if len(planilhas) == 1:
                    print(f"{EMOJI_INFO} O arquivo Excel cont√©m apenas uma planilha: '{planilhas[0]}'.")
                    return planilhas[0]
                else:
                    escolha = questionary.select(
                        f"{EMOJI_QUESTION} Selecione a planilha a ser utilizada:",
                        choices=planilhas
                    ).ask()
                    return escolha
            except Exception as e:
                print(f"{EMOJI_ERROR} Erro ao ler o arquivo Excel: {e}\n")
                logging.error(f"Erro ao ler planilhas do arquivo Excel '{arquivo}': {e}")
                sys.exit(1)
        else:
            return None  # Para arquivos CSV

    @staticmethod
    def selecionar_linha_inicio():
        """
        Pergunta ao usu√°rio qual linha a tabela deve iniciar (zero-based).
        """
        while True:
            linha = questionary.text(
                f"{EMOJI_QUESTION} Digite o n√∫mero da linha onde a tabela come√ßa (zero-based, come√ßando em 0):",
                validate=lambda text: text.isdigit() and int(text) >= 0 or "N√∫mero inv√°lido."
            ).ask()
            if linha and linha.strip().isdigit() and int(linha.strip()) >= 0:
                return int(linha)
            else:
                print(f"{EMOJI_ERROR} Erro: Por favor, insira um n√∫mero v√°lido.\n")

    @staticmethod
    def carregar_dados(arquivo, planilha=None, header_row: int | Sequence[int] | None = 0):
        """
        Carrega os dados do arquivo CSV ou Excel a partir da linha especificada.
        """
        while True:
            try:
                if arquivo.suffix.lower() in [XLSX, XLS]:
                    df = pd.read_excel(arquivo, sheet_name=planilha, header=header_row)
                else:
                    df = pd.read_csv(arquivo, header=header_row)
                logging.info(f"Dados carregados com sucesso do arquivo '{arquivo}'.")
                return df
            except Exception as e:
                print(f"{EMOJI_ERROR} Erro ao carregar os dados do arquivo: {e}\n")
                logging.error(f"Erro ao carregar dados do arquivo '{arquivo}': {e}")
                tentar_novamente = questionary.confirm(
                    f"{EMOJI_QUESTION} Deseja tentar carregar o arquivo novamente?",
                    default=True
                ).ask()
                if not tentar_novamente:
                    print(f"{EMOJI_DONE} Saindo do programa.\n")
                    logging.info("Usu√°rio optou por n√£o tentar carregar o arquivo novamente. Encerrando o programa.")
                    sys.exit(1)

    @staticmethod
    def exibir_primeiras_linhas(df, num_linhas=5):
        """
        Exibe as primeiras linhas do DataFrame.
        """
        print("\n=== Primeiras Linhas do Arquivo ===\n")
        print(tabulate(df.head(num_linhas), headers='keys', tablefmt='grid'))
        print("\n")
        logging.info(f"Primeiras {num_linhas} linhas exibidas para o usu√°rio.")


def main():
    calculator = IROBMCalculator()
    calculator.menu()


if __name__ == "__main__":
    main()
